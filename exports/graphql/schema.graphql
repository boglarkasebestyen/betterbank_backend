input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type Newusers {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstname: String!
  lastname: String!
  username: String!
  email: String
  password: String
  published_at: DateTime
}

type NewusersConnection {
  values: [Newusers]
  groupBy: NewusersGroupBy
  aggregate: NewusersAggregator
}

type NewusersAggregator {
  count: Int
  totalCount: Int
}

type NewusersGroupBy {
  id: [NewusersConnectionId]
  _id: [NewusersConnection_id]
  createdAt: [NewusersConnectionCreatedAt]
  updatedAt: [NewusersConnectionUpdatedAt]
  firstname: [NewusersConnectionFirstname]
  lastname: [NewusersConnectionLastname]
  username: [NewusersConnectionUsername]
  email: [NewusersConnectionEmail]
  password: [NewusersConnectionPassword]
  published_at: [NewusersConnectionPublished_at]
}

type NewusersConnectionId {
  key: ID
  connection: NewusersConnection
}

type NewusersConnection_id {
  key: ID
  connection: NewusersConnection
}

type NewusersConnectionCreatedAt {
  key: DateTime
  connection: NewusersConnection
}

type NewusersConnectionUpdatedAt {
  key: DateTime
  connection: NewusersConnection
}

type NewusersConnectionFirstname {
  key: String
  connection: NewusersConnection
}

type NewusersConnectionLastname {
  key: String
  connection: NewusersConnection
}

type NewusersConnectionUsername {
  key: String
  connection: NewusersConnection
}

type NewusersConnectionEmail {
  key: String
  connection: NewusersConnection
}

type NewusersConnectionPassword {
  key: String
  connection: NewusersConnection
}

type NewusersConnectionPublished_at {
  key: DateTime
  connection: NewusersConnection
}

input NewuserInput {
  firstname: String!
  lastname: String!
  username: String!
  email: String
  password: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editNewuserInput {
  firstname: String
  lastname: String
  username: String
  email: String
  password: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createNewuserInput {
  data: NewuserInput
}

type createNewuserPayload {
  newuser: Newusers
}

input updateNewuserInput {
  where: InputID
  data: editNewuserInput
}

type updateNewuserPayload {
  newuser: Newusers
}

input deleteNewuserInput {
  where: InputID
}

type deleteNewuserPayload {
  newuser: Newusers
}

type Transactions {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  to: String
  from: String
  amount: Float
  date: DateTime
  published_at: DateTime
}

type TransactionsConnection {
  values: [Transactions]
  groupBy: TransactionsGroupBy
  aggregate: TransactionsAggregator
}

type TransactionsAggregator {
  count: Int
  totalCount: Int
  sum: TransactionsAggregatorSum
  avg: TransactionsAggregatorAvg
  min: TransactionsAggregatorMin
  max: TransactionsAggregatorMax
}

type TransactionsAggregatorSum {
  amount: Float
}

type TransactionsAggregatorAvg {
  amount: Float
}

type TransactionsAggregatorMin {
  amount: Float
}

type TransactionsAggregatorMax {
  amount: Float
}

type TransactionsGroupBy {
  id: [TransactionsConnectionId]
  _id: [TransactionsConnection_id]
  createdAt: [TransactionsConnectionCreatedAt]
  updatedAt: [TransactionsConnectionUpdatedAt]
  to: [TransactionsConnectionTo]
  from: [TransactionsConnectionFrom]
  amount: [TransactionsConnectionAmount]
  date: [TransactionsConnectionDate]
  published_at: [TransactionsConnectionPublished_at]
}

type TransactionsConnectionId {
  key: ID
  connection: TransactionsConnection
}

type TransactionsConnection_id {
  key: ID
  connection: TransactionsConnection
}

type TransactionsConnectionCreatedAt {
  key: DateTime
  connection: TransactionsConnection
}

type TransactionsConnectionUpdatedAt {
  key: DateTime
  connection: TransactionsConnection
}

type TransactionsConnectionTo {
  key: String
  connection: TransactionsConnection
}

type TransactionsConnectionFrom {
  key: String
  connection: TransactionsConnection
}

type TransactionsConnectionAmount {
  key: Float
  connection: TransactionsConnection
}

type TransactionsConnectionDate {
  key: DateTime
  connection: TransactionsConnection
}

type TransactionsConnectionPublished_at {
  key: DateTime
  connection: TransactionsConnection
}

input TransactionInput {
  to: String
  from: String
  amount: Float
  date: DateTime
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editTransactionInput {
  to: String
  from: String
  amount: Float
  date: DateTime
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createTransactionInput {
  data: TransactionInput
}

type createTransactionPayload {
  transaction: Transactions
}

input updateTransactionInput {
  where: InputID
  data: editTransactionInput
}

type updateTransactionPayload {
  transaction: Transactions
}

input deleteTransactionInput {
  where: InputID
}

type deleteTransactionPayload {
  transaction: Transactions
}

type I18NLocale {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  code: String
}

input LocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

input editLocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

type UploadFile {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  firstname: String
  lastname: String
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  _id: [UsersPermissionsUserConnection_id]
  createdAt: [UsersPermissionsUserConnectionCreatedAt]
  updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  firstname: [UsersPermissionsUserConnectionFirstname]
  lastname: [UsersPermissionsUserConnectionLastname]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionFirstname {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionLastname {
  key: String
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  firstname: String
  lastname: String
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  firstname: String
  lastname: String
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Newusers | NewusersConnection | NewusersAggregator | NewusersGroupBy | NewusersConnectionId | NewusersConnection_id | NewusersConnectionCreatedAt | NewusersConnectionUpdatedAt | NewusersConnectionFirstname | NewusersConnectionLastname | NewusersConnectionUsername | NewusersConnectionEmail | NewusersConnectionPassword | NewusersConnectionPublished_at | createNewuserPayload | updateNewuserPayload | deleteNewuserPayload | Transactions | TransactionsConnection | TransactionsAggregator | TransactionsAggregatorSum | TransactionsAggregatorAvg | TransactionsAggregatorMin | TransactionsAggregatorMax | TransactionsGroupBy | TransactionsConnectionId | TransactionsConnection_id | TransactionsConnectionCreatedAt | TransactionsConnectionUpdatedAt | TransactionsConnectionTo | TransactionsConnectionFrom | TransactionsConnectionAmount | TransactionsConnectionDate | TransactionsConnectionPublished_at | createTransactionPayload | updateTransactionPayload | deleteTransactionPayload | I18NLocale | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionUpdatedAt | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionFirstname | UsersPermissionsUserConnectionLastname | createUserPayload | updateUserPayload | deleteUserPayload

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  newuser(id: ID!, publicationState: PublicationState): Newusers
  newusers(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Newusers]
  newusersConnection(sort: String, limit: Int, start: Int, where: JSON): NewusersConnection
  transaction(id: ID!, publicationState: PublicationState): Transactions
  transactions(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Transactions]
  transactionsConnection(sort: String, limit: Int, start: Int, where: JSON): TransactionsConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  createNewuser(input: createNewuserInput): createNewuserPayload
  updateNewuser(input: updateNewuserInput): updateNewuserPayload
  deleteNewuser(input: deleteNewuserInput): deleteNewuserPayload
  createTransaction(input: createTransactionInput): createTransactionPayload
  updateTransaction(input: updateTransactionInput): updateTransactionPayload
  deleteTransaction(input: deleteTransactionInput): deleteTransactionPayload

  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
